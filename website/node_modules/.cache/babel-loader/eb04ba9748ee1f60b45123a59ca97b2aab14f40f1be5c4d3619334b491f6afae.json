{"ast":null,"code":"/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar codes = require('./codes.json');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status;\n\n// status code to message map\nstatus.message = codes;\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes);\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes);\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n};\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n};\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap(codes) {\n  var map = {};\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code);\n\n    // populate map\n    map[message.toLowerCase()] = status;\n  });\n  return map;\n}\n\n/**\n * Create a list of all status codes.\n * @private\n */\n\nfunction createStatusCodeList(codes) {\n  return Object.keys(codes).map(function mapCode(code) {\n    return Number(code);\n  });\n}\n\n/**\n * Get the status code for given message.\n * @private\n */\n\nfunction getStatusCode(message) {\n  var msg = message.toLowerCase();\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"');\n  }\n  return status.code[msg];\n}\n\n/**\n * Get the status message for given code.\n * @private\n */\n\nfunction getStatusMessage(code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code);\n  }\n  return status.message[code];\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code);\n  }\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10);\n  if (!isNaN(n)) {\n    return getStatusMessage(n);\n  }\n  return getStatusCode(code);\n}","map":{"version":3,"names":["codes","require","module","exports","status","message","code","createMessageToStatusCodeMap","createStatusCodeList","redirect","empty","retry","map","Object","keys","forEach","forEachCode","Number","toLowerCase","mapCode","getStatusCode","msg","prototype","hasOwnProperty","call","Error","getStatusMessage","TypeError","n","parseInt","isNaN"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/statuses/index.js"],"sourcesContent":["/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.message = codes\n\n// status message (lower-case) to code map\nstatus.code = createMessageToStatusCodeMap(codes)\n\n// array of status codes\nstatus.codes = createStatusCodeList(codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Create a map of message to status code.\n * @private\n */\n\nfunction createMessageToStatusCodeMap (codes) {\n  var map = {}\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // populate map\n    map[message.toLowerCase()] = status\n  })\n\n  return map\n}\n\n/**\n * Create a list of all status codes.\n * @private\n */\n\nfunction createStatusCodeList (codes) {\n  return Object.keys(codes).map(function mapCode (code) {\n    return Number(code)\n  })\n}\n\n/**\n * Get the status code for given message.\n * @private\n */\n\nfunction getStatusCode (message) {\n  var msg = message.toLowerCase()\n\n  if (!Object.prototype.hasOwnProperty.call(status.code, msg)) {\n    throw new Error('invalid status message: \"' + message + '\"')\n  }\n\n  return status.code[msg]\n}\n\n/**\n * Get the status message for given code.\n * @private\n */\n\nfunction getStatusMessage (code) {\n  if (!Object.prototype.hasOwnProperty.call(status.message, code)) {\n    throw new Error('invalid status code: ' + code)\n  }\n\n  return status.message[code]\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    return getStatusMessage(code)\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    return getStatusMessage(n)\n  }\n\n  return getStatusCode(code)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}