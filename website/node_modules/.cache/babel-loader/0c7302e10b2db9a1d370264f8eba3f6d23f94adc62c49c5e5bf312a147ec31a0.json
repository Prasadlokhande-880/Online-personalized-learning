{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.')),\n    mac = exports.sign(str, secret);\n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str) {\n  return crypto.createHash('sha1').update(str).digest('hex');\n}","map":{"version":3,"names":["crypto","require","exports","sign","val","secret","TypeError","createHmac","update","digest","replace","unsign","str","slice","lastIndexOf","mac","sha1","createHash"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/cookie-signature/index.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto\n    .createHmac('sha256', secret)\n    .update(val)\n    .digest('base64')\n    .replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.'))\n    , mac = exports.sign(str, secret);\n  \n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str){\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,IAAI,GAAG,UAASC,GAAG,EAAEC,MAAM,EAAC;EAClC,IAAI,QAAQ,IAAI,OAAOD,GAAG,EAAE,MAAM,IAAIE,SAAS,CAAC,4CAA4C,CAAC;EAC7F,IAAI,QAAQ,IAAI,OAAOD,MAAM,EAAE,MAAM,IAAIC,SAAS,CAAC,iCAAiC,CAAC;EACrF,OAAOF,GAAG,GAAG,GAAG,GAAGJ,MAAM,CACtBO,UAAU,CAAC,QAAQ,EAAEF,MAAM,CAAC,CAC5BG,MAAM,CAACJ,GAAG,CAAC,CACXK,MAAM,CAAC,QAAQ,CAAC,CAChBC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAR,OAAO,CAACS,MAAM,GAAG,UAASP,GAAG,EAAEC,MAAM,EAAC;EACpC,IAAI,QAAQ,IAAI,OAAOD,GAAG,EAAE,MAAM,IAAIE,SAAS,CAAC,wCAAwC,CAAC;EACzF,IAAI,QAAQ,IAAI,OAAOD,MAAM,EAAE,MAAM,IAAIC,SAAS,CAAC,iCAAiC,CAAC;EACrF,IAAIM,GAAG,GAAGR,GAAG,CAACS,KAAK,CAAC,CAAC,EAAET,GAAG,CAACU,WAAW,CAAC,GAAG,CAAC,CAAC;IACxCC,GAAG,GAAGb,OAAO,CAACC,IAAI,CAACS,GAAG,EAAEP,MAAM,CAAC;EAEnC,OAAOW,IAAI,CAACD,GAAG,CAAC,IAAIC,IAAI,CAACZ,GAAG,CAAC,GAAGQ,GAAG,GAAG,KAAK;AAC7C,CAAC;;AAED;AACA;AACA;;AAEA,SAASI,IAAIA,CAACJ,GAAG,EAAC;EAChB,OAAOZ,MAAM,CAACiB,UAAU,CAAC,MAAM,CAAC,CAACT,MAAM,CAACI,GAAG,CAAC,CAACH,MAAM,CAAC,KAAK,CAAC;AAC5D"},"metadata":{},"sourceType":"script","externalDependencies":[]}