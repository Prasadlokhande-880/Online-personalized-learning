{"ast":null,"code":"/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\nmodule.exports = rangeParser;\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser(size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n  var index = str.indexOf('=');\n  if (index === -1) {\n    return -2;\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',');\n  var ranges = [];\n\n  // add ranges type\n  ranges.type = str.slice(0, index);\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-');\n    var start = parseInt(range[0], 10);\n    var end = parseInt(range[1], 10);\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end;\n      end = size - 1;\n      // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1;\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1;\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue;\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    });\n  }\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1;\n  }\n  return options && options.combine ? combineRanges(ranges) : ranges;\n}\n\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\nfunction combineRanges(ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i];\n    var current = ordered[j];\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range;\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end;\n      current.index = Math.min(current.index, range.index);\n    }\n  }\n\n  // trim ordered array\n  ordered.length = j + 1;\n\n  // generate combined range\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);\n\n  // copy ranges type\n  combined.type = ranges.type;\n  return combined;\n}\n\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\nfunction mapWithIndex(range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  };\n}\n\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\nfunction mapWithoutIndex(range) {\n  return {\n    start: range.start,\n    end: range.end\n  };\n}\n\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\nfunction sortByRangeIndex(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\nfunction sortByRangeStart(a, b) {\n  return a.start - b.start;\n}","map":{"version":3,"names":["module","exports","rangeParser","size","str","options","TypeError","index","indexOf","arr","slice","split","ranges","type","i","length","range","start","parseInt","end","isNaN","push","combine","combineRanges","ordered","map","mapWithIndex","sort","sortByRangeStart","j","current","Math","min","combined","sortByRangeIndex","mapWithoutIndex","a","b"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/range-parser/index.js"],"sourcesContent":["/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser (size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string')\n  }\n\n  var index = str.indexOf('=')\n\n  if (index === -1) {\n    return -2\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',')\n  var ranges = []\n\n  // add ranges type\n  ranges.type = str.slice(0, index)\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-')\n    var start = parseInt(range[0], 10)\n    var end = parseInt(range[1], 10)\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end\n      end = size - 1\n    // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    })\n  }\n\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1\n  }\n\n  return options && options.combine\n    ? combineRanges(ranges)\n    : ranges\n}\n\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\nfunction combineRanges (ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart)\n\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i]\n    var current = ordered[j]\n\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end\n      current.index = Math.min(current.index, range.index)\n    }\n  }\n\n  // trim ordered array\n  ordered.length = j + 1\n\n  // generate combined range\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex)\n\n  // copy ranges type\n  combined.type = ranges.type\n\n  return combined\n}\n\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\nfunction mapWithIndex (range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  }\n}\n\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\nfunction mapWithoutIndex (range) {\n  return {\n    start: range.start,\n    end: range.end\n  }\n}\n\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\nfunction sortByRangeIndex (a, b) {\n  return a.index - b.index\n}\n\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\nfunction sortByRangeStart (a, b) {\n  return a.start - b.start\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}