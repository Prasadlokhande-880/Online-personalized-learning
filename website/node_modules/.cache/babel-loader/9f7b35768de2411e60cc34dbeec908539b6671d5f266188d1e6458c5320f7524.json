{"ast":null,"code":"/*!\n * vary\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n */\nmodule.exports = vary;\nmodule.exports.append = append;\n\n/**\n * RegExp to match field-name in RFC 7230 sec 3.2\n *\n * field-name    = token\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n */\n\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @public\n */\n\nfunction append(header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required');\n  }\n  if (!field) {\n    throw new TypeError('field argument is required');\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field) ? parse(String(field)) : field;\n\n  // assert on invalid field names\n  for (var j = 0; j < fields.length; j++) {\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\n      throw new TypeError('field argument contains an invalid header name');\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header;\n  }\n\n  // enumerate current values\n  var val = header;\n  var vals = parse(header.toLowerCase());\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*';\n  }\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase();\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld);\n      val = val ? val + ', ' + fields[i] : fields[i];\n    }\n  }\n  return val;\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @private\n */\n\nfunction parse(header) {\n  var end = 0;\n  var list = [];\n  var start = 0;\n\n  // gather tokens\n  for (var i = 0, len = header.length; i < len; i++) {\n    switch (header.charCodeAt(i)) {\n      case 0x20:\n        /*   */\n        if (start === end) {\n          start = end = i + 1;\n        }\n        break;\n      case 0x2c:\n        /* , */\n        list.push(header.substring(start, end));\n        start = end = i + 1;\n        break;\n      default:\n        end = i + 1;\n        break;\n    }\n  }\n\n  // final token\n  list.push(header.substring(start, end));\n  return list;\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @public\n */\n\nfunction vary(res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required');\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || '';\n  var header = Array.isArray(val) ? val.join(', ') : String(val);\n\n  // set new header\n  if (val = append(header, field)) {\n    res.setHeader('Vary', val);\n  }\n}","map":{"version":3,"names":["module","exports","vary","append","FIELD_NAME_REGEXP","header","field","TypeError","fields","Array","isArray","parse","String","j","length","test","val","vals","toLowerCase","indexOf","i","fld","push","end","list","start","len","charCodeAt","substring","res","getHeader","setHeader","join"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/vary/index.js"],"sourcesContent":["/*!\n * vary\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = vary\nmodule.exports.append = append\n\n/**\n * RegExp to match field-name in RFC 7230 sec 3.2\n *\n * field-name    = token\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n */\n\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @public\n */\n\nfunction append (header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required')\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required')\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field)\n    ? parse(String(field))\n    : field\n\n  // assert on invalid field names\n  for (var j = 0; j < fields.length; j++) {\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\n      throw new TypeError('field argument contains an invalid header name')\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header\n  }\n\n  // enumerate current values\n  var val = header\n  var vals = parse(header.toLowerCase())\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*'\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase()\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld)\n      val = val\n        ? val + ', ' + fields[i]\n        : fields[i]\n    }\n  }\n\n  return val\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @private\n */\n\nfunction parse (header) {\n  var end = 0\n  var list = []\n  var start = 0\n\n  // gather tokens\n  for (var i = 0, len = header.length; i < len; i++) {\n    switch (header.charCodeAt(i)) {\n      case 0x20: /*   */\n        if (start === end) {\n          start = end = i + 1\n        }\n        break\n      case 0x2c: /* , */\n        list.push(header.substring(start, end))\n        start = end = i + 1\n        break\n      default:\n        end = i + 1\n        break\n    }\n  }\n\n  // final token\n  list.push(header.substring(start, end))\n\n  return list\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @public\n */\n\nfunction vary (res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required')\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || ''\n  var header = Array.isArray(val)\n    ? val.join(', ')\n    : String(val)\n\n  // set new header\n  if ((val = append(header, field))) {\n    res.setHeader('Vary', val)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}