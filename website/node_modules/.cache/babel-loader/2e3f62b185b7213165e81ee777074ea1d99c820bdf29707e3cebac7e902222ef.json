{"ast":null,"code":"/*!\n * http-errors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar deprecate = require('depd')('http-errors');\nvar setPrototypeOf = require('setprototypeof');\nvar statuses = require('statuses');\nvar inherits = require('inherits');\nvar toIdentifier = require('toidentifier');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createError;\nmodule.exports.HttpError = createHttpErrorConstructor();\nmodule.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);\n\n// Populate exports for all constructors\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);\n\n/**\n * Get the code class of a status code.\n * @private\n */\n\nfunction codeClass(status) {\n  return Number(String(status).charAt(0) + '00');\n}\n\n/**\n * Create a new HTTP Error.\n *\n * @returns {Error}\n * @public\n */\n\nfunction createError() {\n  // so much arity going on ~_~\n  var err;\n  var msg;\n  var status = 500;\n  var props = {};\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    var type = typeof arg;\n    if (type === 'object' && arg instanceof Error) {\n      err = arg;\n      status = err.status || err.statusCode || status;\n    } else if (type === 'number' && i === 0) {\n      status = arg;\n    } else if (type === 'string') {\n      msg = arg;\n    } else if (type === 'object') {\n      props = arg;\n    } else {\n      throw new TypeError('argument #' + (i + 1) + ' unsupported type ' + type);\n    }\n  }\n  if (typeof status === 'number' && (status < 400 || status >= 600)) {\n    deprecate('non-error status code; use only 4xx or 5xx status codes');\n  }\n  if (typeof status !== 'number' || !statuses.message[status] && (status < 400 || status >= 600)) {\n    status = 500;\n  }\n\n  // constructor\n  var HttpError = createError[status] || createError[codeClass(status)];\n  if (!err) {\n    // create error\n    err = HttpError ? new HttpError(msg) : new Error(msg || statuses.message[status]);\n    Error.captureStackTrace(err, createError);\n  }\n  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\n    // add properties to generic error\n    err.expose = status < 500;\n    err.status = err.statusCode = status;\n  }\n  for (var key in props) {\n    if (key !== 'status' && key !== 'statusCode') {\n      err[key] = props[key];\n    }\n  }\n  return err;\n}\n\n/**\n * Create HTTP error abstract base class.\n * @private\n */\n\nfunction createHttpErrorConstructor() {\n  function HttpError() {\n    throw new TypeError('cannot construct abstract class');\n  }\n  inherits(HttpError, Error);\n  return HttpError;\n}\n\n/**\n * Create a constructor for a client error.\n * @private\n */\n\nfunction createClientErrorConstructor(HttpError, name, code) {\n  var className = toClassName(name);\n  function ClientError(message) {\n    // create the error object\n    var msg = message != null ? message : statuses.message[code];\n    var err = new Error(msg);\n\n    // capture a stack trace to the construction point\n    Error.captureStackTrace(err, ClientError);\n\n    // adjust the [[Prototype]]\n    setPrototypeOf(err, ClientError.prototype);\n\n    // redefine the error message\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    });\n\n    // redefine the error name\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n  inherits(ClientError, HttpError);\n  nameFunc(ClientError, className);\n  ClientError.prototype.status = code;\n  ClientError.prototype.statusCode = code;\n  ClientError.prototype.expose = true;\n  return ClientError;\n}\n\n/**\n * Create function to test is a value is a HttpError.\n * @private\n */\n\nfunction createIsHttpErrorFunction(HttpError) {\n  return function isHttpError(val) {\n    if (!val || typeof val !== 'object') {\n      return false;\n    }\n    if (val instanceof HttpError) {\n      return true;\n    }\n    return val instanceof Error && typeof val.expose === 'boolean' && typeof val.statusCode === 'number' && val.status === val.statusCode;\n  };\n}\n\n/**\n * Create a constructor for a server error.\n * @private\n */\n\nfunction createServerErrorConstructor(HttpError, name, code) {\n  var className = toClassName(name);\n  function ServerError(message) {\n    // create the error object\n    var msg = message != null ? message : statuses.message[code];\n    var err = new Error(msg);\n\n    // capture a stack trace to the construction point\n    Error.captureStackTrace(err, ServerError);\n\n    // adjust the [[Prototype]]\n    setPrototypeOf(err, ServerError.prototype);\n\n    // redefine the error message\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    });\n\n    // redefine the error name\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n  inherits(ServerError, HttpError);\n  nameFunc(ServerError, className);\n  ServerError.prototype.status = code;\n  ServerError.prototype.statusCode = code;\n  ServerError.prototype.expose = false;\n  return ServerError;\n}\n\n/**\n * Set the name of a function, if possible.\n * @private\n */\n\nfunction nameFunc(func, name) {\n  var desc = Object.getOwnPropertyDescriptor(func, 'name');\n  if (desc && desc.configurable) {\n    desc.value = name;\n    Object.defineProperty(func, 'name', desc);\n  }\n}\n\n/**\n * Populate the exports object with constructors for every error class.\n * @private\n */\n\nfunction populateConstructorExports(exports, codes, HttpError) {\n  codes.forEach(function forEachCode(code) {\n    var CodeError;\n    var name = toIdentifier(statuses.message[code]);\n    switch (codeClass(code)) {\n      case 400:\n        CodeError = createClientErrorConstructor(HttpError, name, code);\n        break;\n      case 500:\n        CodeError = createServerErrorConstructor(HttpError, name, code);\n        break;\n    }\n    if (CodeError) {\n      // export the constructor\n      exports[code] = CodeError;\n      exports[name] = CodeError;\n    }\n  });\n}\n\n/**\n * Get a class name from a name identifier.\n * @private\n */\n\nfunction toClassName(name) {\n  return name.substr(-5) !== 'Error' ? name + 'Error' : name;\n}","map":{"version":3,"names":["deprecate","require","setPrototypeOf","statuses","inherits","toIdentifier","module","exports","createError","HttpError","createHttpErrorConstructor","isHttpError","createIsHttpErrorFunction","populateConstructorExports","codes","codeClass","status","Number","String","charAt","err","msg","props","i","arguments","length","arg","type","Error","statusCode","TypeError","message","captureStackTrace","expose","key","createClientErrorConstructor","name","code","className","toClassName","ClientError","prototype","Object","defineProperty","enumerable","configurable","value","writable","nameFunc","val","createServerErrorConstructor","ServerError","func","desc","getOwnPropertyDescriptor","forEach","forEachCode","CodeError","substr"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/http-errors/index.js"],"sourcesContent":["/*!\n * http-errors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('http-errors')\nvar setPrototypeOf = require('setprototypeof')\nvar statuses = require('statuses')\nvar inherits = require('inherits')\nvar toIdentifier = require('toidentifier')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createError\nmodule.exports.HttpError = createHttpErrorConstructor()\nmodule.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError)\n\n// Populate exports for all constructors\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError)\n\n/**\n * Get the code class of a status code.\n * @private\n */\n\nfunction codeClass (status) {\n  return Number(String(status).charAt(0) + '00')\n}\n\n/**\n * Create a new HTTP Error.\n *\n * @returns {Error}\n * @public\n */\n\nfunction createError () {\n  // so much arity going on ~_~\n  var err\n  var msg\n  var status = 500\n  var props = {}\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i]\n    var type = typeof arg\n    if (type === 'object' && arg instanceof Error) {\n      err = arg\n      status = err.status || err.statusCode || status\n    } else if (type === 'number' && i === 0) {\n      status = arg\n    } else if (type === 'string') {\n      msg = arg\n    } else if (type === 'object') {\n      props = arg\n    } else {\n      throw new TypeError('argument #' + (i + 1) + ' unsupported type ' + type)\n    }\n  }\n\n  if (typeof status === 'number' && (status < 400 || status >= 600)) {\n    deprecate('non-error status code; use only 4xx or 5xx status codes')\n  }\n\n  if (typeof status !== 'number' ||\n    (!statuses.message[status] && (status < 400 || status >= 600))) {\n    status = 500\n  }\n\n  // constructor\n  var HttpError = createError[status] || createError[codeClass(status)]\n\n  if (!err) {\n    // create error\n    err = HttpError\n      ? new HttpError(msg)\n      : new Error(msg || statuses.message[status])\n    Error.captureStackTrace(err, createError)\n  }\n\n  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\n    // add properties to generic error\n    err.expose = status < 500\n    err.status = err.statusCode = status\n  }\n\n  for (var key in props) {\n    if (key !== 'status' && key !== 'statusCode') {\n      err[key] = props[key]\n    }\n  }\n\n  return err\n}\n\n/**\n * Create HTTP error abstract base class.\n * @private\n */\n\nfunction createHttpErrorConstructor () {\n  function HttpError () {\n    throw new TypeError('cannot construct abstract class')\n  }\n\n  inherits(HttpError, Error)\n\n  return HttpError\n}\n\n/**\n * Create a constructor for a client error.\n * @private\n */\n\nfunction createClientErrorConstructor (HttpError, name, code) {\n  var className = toClassName(name)\n\n  function ClientError (message) {\n    // create the error object\n    var msg = message != null ? message : statuses.message[code]\n    var err = new Error(msg)\n\n    // capture a stack trace to the construction point\n    Error.captureStackTrace(err, ClientError)\n\n    // adjust the [[Prototype]]\n    setPrototypeOf(err, ClientError.prototype)\n\n    // redefine the error message\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    })\n\n    // redefine the error name\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    })\n\n    return err\n  }\n\n  inherits(ClientError, HttpError)\n  nameFunc(ClientError, className)\n\n  ClientError.prototype.status = code\n  ClientError.prototype.statusCode = code\n  ClientError.prototype.expose = true\n\n  return ClientError\n}\n\n/**\n * Create function to test is a value is a HttpError.\n * @private\n */\n\nfunction createIsHttpErrorFunction (HttpError) {\n  return function isHttpError (val) {\n    if (!val || typeof val !== 'object') {\n      return false\n    }\n\n    if (val instanceof HttpError) {\n      return true\n    }\n\n    return val instanceof Error &&\n      typeof val.expose === 'boolean' &&\n      typeof val.statusCode === 'number' && val.status === val.statusCode\n  }\n}\n\n/**\n * Create a constructor for a server error.\n * @private\n */\n\nfunction createServerErrorConstructor (HttpError, name, code) {\n  var className = toClassName(name)\n\n  function ServerError (message) {\n    // create the error object\n    var msg = message != null ? message : statuses.message[code]\n    var err = new Error(msg)\n\n    // capture a stack trace to the construction point\n    Error.captureStackTrace(err, ServerError)\n\n    // adjust the [[Prototype]]\n    setPrototypeOf(err, ServerError.prototype)\n\n    // redefine the error message\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    })\n\n    // redefine the error name\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    })\n\n    return err\n  }\n\n  inherits(ServerError, HttpError)\n  nameFunc(ServerError, className)\n\n  ServerError.prototype.status = code\n  ServerError.prototype.statusCode = code\n  ServerError.prototype.expose = false\n\n  return ServerError\n}\n\n/**\n * Set the name of a function, if possible.\n * @private\n */\n\nfunction nameFunc (func, name) {\n  var desc = Object.getOwnPropertyDescriptor(func, 'name')\n\n  if (desc && desc.configurable) {\n    desc.value = name\n    Object.defineProperty(func, 'name', desc)\n  }\n}\n\n/**\n * Populate the exports object with constructors for every error class.\n * @private\n */\n\nfunction populateConstructorExports (exports, codes, HttpError) {\n  codes.forEach(function forEachCode (code) {\n    var CodeError\n    var name = toIdentifier(statuses.message[code])\n\n    switch (codeClass(code)) {\n      case 400:\n        CodeError = createClientErrorConstructor(HttpError, name, code)\n        break\n      case 500:\n        CodeError = createServerErrorConstructor(HttpError, name, code)\n        break\n    }\n\n    if (CodeError) {\n      // export the constructor\n      exports[code] = CodeError\n      exports[name] = CodeError\n    }\n  })\n}\n\n/**\n * Get a class name from a name identifier.\n * @private\n */\n\nfunction toClassName (name) {\n  return name.substr(-5) !== 'Error'\n    ? name + 'Error'\n    : name\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}