{"ast":null,"code":"/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n  var obj = {};\n  var opt = options || {};\n  var dec = opt.decode || decode;\n  var index = 0;\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n    var endIdx = str.indexOf(';', index);\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n    var key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n      obj[key] = tryDecode(val, dec);\n    }\n    index = endIdx + 1;\n  }\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n  var value = enc(val);\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n  var str = name + '=' + value;\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid');\n    }\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n    str += '; Domain=' + opt.domain;\n  }\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n    str += '; Path=' + opt.path;\n  }\n  if (opt.expires) {\n    var expires = opt.expires;\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n    str += '; Expires=' + expires.toUTCString();\n  }\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n  if (opt.secure) {\n    str += '; Secure';\n  }\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low';\n        break;\n      case 'medium':\n        str += '; Priority=Medium';\n        break;\n      case 'high':\n        str += '; Priority=High';\n        break;\n      default:\n        throw new TypeError('option priority is invalid');\n    }\n  }\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode(str) {\n  return str.indexOf('%') !== -1 ? decodeURIComponent(str) : str;\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode(val) {\n  return encodeURIComponent(val);\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate(val) {\n  return __toString.call(val) === '[object Date]' || val instanceof Date;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}","map":{"version":3,"names":["exports","parse","serialize","__toString","Object","prototype","toString","fieldContentRegExp","str","options","TypeError","obj","opt","dec","decode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","tryDecode","name","enc","encode","test","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","call","Date","e"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/cookie/index.js"],"sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}