{"ast":null,"code":"var path = require('path');\nvar fs = require('fs');\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' + this.types[exts[i]] + ' to ' + type);\n      }\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function (file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n    content = fs.readFileSync(file, 'ascii'),\n    lines = content.split(/[\\r\\n]+/);\n  lines.forEach(function (line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n  this.define(map);\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function (path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function (mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function (mimeType, fallback) {\n    // Assume text types are utf8\n    return /^text\\/|^application\\/(javascript|json)/.test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\nmodule.exports = mime;","map":{"version":3,"names":["path","require","fs","Mime","types","Object","create","extensions","prototype","define","map","type","exts","i","length","process","env","DEBUG_MIME","console","warn","_loading","replace","load","file","content","readFileSync","lines","split","forEach","line","fields","shift","lookup","fallback","ext","toLowerCase","default_type","extension","mimeType","match","mime","charsets","test","module","exports"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/mime/mime.js"],"sourcesContent":["var path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts[i]] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\/|^application\\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n\nmodule.exports = mime;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}