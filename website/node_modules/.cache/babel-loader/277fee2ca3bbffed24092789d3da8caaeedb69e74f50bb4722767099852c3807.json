{"ast":null,"code":"/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\nmodule.exports = preferredCharsets;\nmodule.exports.preferredCharsets = preferredCharsets;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept-Charset header.\n * @private\n */\n\nfunction parseAcceptCharset(accept) {\n  var accepts = accept.split(',');\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var charset = parseCharset(accepts[i].trim(), i);\n    if (charset) {\n      accepts[j++] = charset;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n  return accepts;\n}\n\n/**\n * Parse a charset from the Accept-Charset header.\n * @private\n */\n\nfunction parseCharset(str, i) {\n  var match = simpleCharsetRegExp.exec(str);\n  if (!match) return null;\n  var charset = match[1];\n  var q = 1;\n  if (match[2]) {\n    var params = match[2].split(';');\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n  return {\n    charset: charset,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of a charset.\n * @private\n */\n\nfunction getCharsetPriority(charset, accepted, index) {\n  var priority = {\n    o: -1,\n    q: 0,\n    s: 0\n  };\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(charset, accepted[i], index);\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n  return priority;\n}\n\n/**\n * Get the specificity of the charset.\n * @private\n */\n\nfunction specify(charset, spec, index) {\n  var s = 0;\n  if (spec.charset.toLowerCase() === charset.toLowerCase()) {\n    s |= 1;\n  } else if (spec.charset !== '*') {\n    return null;\n  }\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  };\n}\n\n/**\n * Get the preferred charsets from an Accept-Charset header.\n * @public\n */\n\nfunction preferredCharsets(accept, provided) {\n  // RFC 2616 sec 14.2: no header = *\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\n  if (!provided) {\n    // sorted list of all charsets\n    return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);\n  }\n  var priorities = provided.map(function getPriority(type, index) {\n    return getCharsetPriority(type, accepts, index);\n  });\n\n  // sorted list of accepted charsets\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n\n/**\n * Get full charset string.\n * @private\n */\n\nfunction getFullCharset(spec) {\n  return spec.charset;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}","map":{"version":3,"names":["module","exports","preferredCharsets","simpleCharsetRegExp","parseAcceptCharset","accept","accepts","split","i","j","length","charset","parseCharset","trim","str","match","exec","q","params","p","parseFloat","getCharsetPriority","accepted","index","priority","o","s","spec","specify","toLowerCase","provided","undefined","filter","isQuality","sort","compareSpecs","map","getFullCharset","priorities","getPriority","type","getCharset","indexOf","a","b"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/negotiator/lib/charset.js"],"sourcesContent":["/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredCharsets;\nmodule.exports.preferredCharsets = preferredCharsets;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept-Charset header.\n * @private\n */\n\nfunction parseAcceptCharset(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var charset = parseCharset(accepts[i].trim(), i);\n\n    if (charset) {\n      accepts[j++] = charset;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse a charset from the Accept-Charset header.\n * @private\n */\n\nfunction parseCharset(str, i) {\n  var match = simpleCharsetRegExp.exec(str);\n  if (!match) return null;\n\n  var charset = match[1];\n  var q = 1;\n  if (match[2]) {\n    var params = match[2].split(';')\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n\n  return {\n    charset: charset,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of a charset.\n * @private\n */\n\nfunction getCharsetPriority(charset, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(charset, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the charset.\n * @private\n */\n\nfunction specify(charset, spec, index) {\n  var s = 0;\n  if(spec.charset.toLowerCase() === charset.toLowerCase()){\n    s |= 1;\n  } else if (spec.charset !== '*' ) {\n    return null\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  }\n}\n\n/**\n * Get the preferred charsets from an Accept-Charset header.\n * @public\n */\n\nfunction preferredCharsets(accept, provided) {\n  // RFC 2616 sec 14.2: no header = *\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all charsets\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullCharset);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getCharsetPriority(type, accepts, index);\n  });\n\n  // sorted list of accepted charsets\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full charset string.\n * @private\n */\n\nfunction getFullCharset(spec) {\n  return spec.charset;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}