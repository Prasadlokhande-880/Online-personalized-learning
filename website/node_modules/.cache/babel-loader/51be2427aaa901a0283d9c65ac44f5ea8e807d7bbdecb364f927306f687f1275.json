{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {}\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {}\nUtf16BEEncoder.prototype.write = function (str) {\n  var buf = Buffer.from(str, 'ucs2');\n  for (var i = 0; i < buf.length; i += 2) {\n    var tmp = buf[i];\n    buf[i] = buf[i + 1];\n    buf[i + 1] = tmp;\n  }\n  return buf;\n};\nUtf16BEEncoder.prototype.end = function () {};\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n  this.overflowByte = -1;\n}\nUtf16BEDecoder.prototype.write = function (buf) {\n  if (buf.length == 0) return '';\n  var buf2 = Buffer.alloc(buf.length + 1),\n    i = 0,\n    j = 0;\n  if (this.overflowByte !== -1) {\n    buf2[0] = buf[0];\n    buf2[1] = this.overflowByte;\n    i = 1;\n    j = 2;\n  }\n  for (; i < buf.length - 1; i += 2, j += 2) {\n    buf2[j] = buf[i + 1];\n    buf2[j + 1] = buf[i];\n  }\n  this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;\n  return buf2.slice(0, j).toString('ucs2');\n};\nUtf16BEDecoder.prototype.end = function () {};\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) options.addBOM = true;\n  this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\nUtf16Encoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\nUtf16Encoder.prototype.end = function () {\n  return this.encoder.end();\n};\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n  this.decoder = null;\n  this.initialBytes = [];\n  this.initialBytesLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\nUtf16Decoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBytes.push(buf);\n    this.initialBytesLen += buf.length;\n    if (this.initialBytesLen < 16)\n      // We need more bytes to use space heuristic (see below)\n      return '';\n\n    // We have enough bytes -> detect endianness.\n    var buf = Buffer.concat(this.initialBytes),\n      encoding = detectEncoding(buf, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    this.initialBytes.length = this.initialBytesLen = 0;\n  }\n  return this.decoder.write(buf);\n};\nUtf16Decoder.prototype.end = function () {\n  if (!this.decoder) {\n    var buf = Buffer.concat(this.initialBytes),\n      encoding = detectEncoding(buf, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var res = this.decoder.write(buf),\n      trail = this.decoder.end();\n    return trail ? res + trail : res;\n  }\n  return this.decoder.end();\n};\nfunction detectEncoding(buf, defaultEncoding) {\n  var enc = defaultEncoding || 'utf-16le';\n  if (buf.length >= 2) {\n    // Check BOM.\n    if (buf[0] == 0xFE && buf[1] == 0xFF)\n      // UTF-16BE BOM\n      enc = 'utf-16be';else if (buf[0] == 0xFF && buf[1] == 0xFE)\n      // UTF-16LE BOM\n      enc = 'utf-16le';else {\n      // No BOM found. Try to deduce encoding from initial content.\n      // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n      // So, we count ASCII as if it was LE or BE, and decide from that.\n      var asciiCharsLE = 0,\n        asciiCharsBE = 0,\n        // Counts of chars in both positions\n        _len = Math.min(buf.length - buf.length % 2, 64); // Len is always even.\n\n      for (var i = 0; i < _len; i += 2) {\n        if (buf[i] === 0 && buf[i + 1] !== 0) asciiCharsBE++;\n        if (buf[i] !== 0 && buf[i + 1] === 0) asciiCharsLE++;\n      }\n      if (asciiCharsBE > asciiCharsLE) enc = 'utf-16be';else if (asciiCharsBE < asciiCharsLE) enc = 'utf-16le';\n    }\n  }\n  return enc;\n}","map":{"version":3,"names":["Buffer","require","exports","utf16be","Utf16BECodec","prototype","encoder","Utf16BEEncoder","decoder","Utf16BEDecoder","bomAware","write","str","buf","from","i","length","tmp","end","overflowByte","buf2","alloc","j","slice","toString","utf16","Utf16Codec","codecOptions","iconv","Utf16Encoder","Utf16Decoder","options","codec","addBOM","undefined","getEncoder","initialBytes","initialBytesLen","push","concat","encoding","detectEncoding","defaultEncoding","getDecoder","res","trail","enc","asciiCharsLE","asciiCharsBE","_len","Math","min"],"sources":["/Users/prasadlokhande/Documents/GitHub/Online-personalized-learning/website/node_modules/body-parser/node_modules/iconv-lite/encodings/utf16.js"],"sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}